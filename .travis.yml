# Â© 2019 Joseph Cameron - All Rights Reserved
# gdk-graphics ci script

dist: bionic 
sudo: required
language: cpp

matrix:
  include:
    # Build scripts
    - os: linux
      name: build wasm using emscripten
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - cmake
            - git
            - python2.7
            - default-jre
      script:
        - |
          git clone https://github.com/emscripten-core/emsdk.git ~/emsdk
          pushd ~/emsdk
          git pull
          ./emsdk install latest
          ./emsdk activate latest
          source ./emsdk_env.sh
          git clone https://github.com/emscripten-core/emscripten.git ~/emscripten
          popd
          cd workspace
          cmake .. -G "Unix Makefiles" -DJFC_BUILD_DOCS=OFF -DJFC_BUILD_DEMO=OFF -DJFC_BUILD_TESTS=OFF -DCMAKE_CXX_FLAGS="-s USE_GLFW=3" -DCMAKE_TOOLCHAIN_FILE="~/emscripten/cmake/Modules/Platform/Emscripten.cmake"
          cmake --build .

    - os: linux
      dist: bionic 
      arch: arm64
      name: build linux gcc
      compiler: gcc
      addons:
        apt:
          sources:
            - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages:
            - cmake
            - git
            - gcc-9
            - g++-9
            - libxcursor-dev
            - libxi-dev
            - libxinerama-dev
            - libxrandr-dev
            - mesa-utils 
            - libgl1-mesa-dev
            - libglu1-mesa-dev
      script:
        - |
          cd workspace #export CXX="g++-9" CC="gcc-9"; 
          cmake .. -DJFC_BUILD_DOCS=OFF -DJFC_BUILD_DEMO=OFF -DJFC_BUILD_TESTS=OFF #-DCMAKE_CXX_FLAGS="-pedantic -Wall -Wextra -Ofast -flto -funroll-loops -m64 -march=native"
          cmake --build .

    - os: linux
      name: build linux gcc
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - cmake
            - git
            - libxcursor-dev
            - libxi-dev
            - libxinerama-dev
            - libxrandr-dev
            - mesa-utils 
            - libgl1-mesa-dev
            - libglu1-mesa-dev
      script:
        - |
          cd workspace;git submodule update --init --recursive
          cmake .. -DJFC_BUILD_DOCS=OFF -DJFC_BUILD_DEMO=OFF -DJFC_BUILD_TESTS=OFF #-DGLEW_OSMESA=1 #-DCMAKE_CXX_FLAGS="-pedantic -Wall -Wextra -Ofast -flto -funroll-loops -m64 -march=native" 
          cmake --build .

    - os: osx
      name: build macos clang
      osx_image: xcode11.2
      compiler: clang
      script:
        - |
          cd workspace;git submodule update --init --recursive
          cmake .. -DJFC_BUILD_DOCS=OFF -DJFC_BUILD_TESTS=OFF -DCMAKE_CXX_FLAGS="-DGL_SILENCE_DEPRECATION" #-DCMAKE_CXX_FLAGS="-pedantic -Weverything -Wno-c++98-compat -Wno-padded -Ofast -flto -funroll-loops -m64 -march=native -std=c++17 -stdlib=libc++" 
          cmake --build .

    - os: windows
      name: build windows msvc
      compiler: MSVC
      script: 
        - |
          cd workspace;git submodule update --init --recursive
          cmake .. -DJFC_BUILD_DOCS=OFF -DJFC_BUILD_TESTS=OFF #-DCMAKE_CXX_FLAGS=" /W4 /EHsc /WX /std:c++17 /permissive-" 
          cmake --build .

#    - os: windows
#      name: build windows mingw
#      compiler: mingw64
#      install: choco install mingw
#      script: 
#        - |
#          cd workspace;git submodule update --init --recursive
#          cmake .. -G "MinGW Makefiles" -DCMAKE_SH="CMAKE_SH-NOTFOUND" -DJFC_BUILD_DOCS=OFF -DJFC_BUILD_TESTS=OFF #-DCMAKE_CXX_FLAGS="-pedantic -Wall -Wextra -Ofast -flto -funroll-loops -m64 -march=native" 
#          cmake --build .

    # Documentation 
    - os: linux
      name: generate doxygen, upload to gh-pages
      if: branch = master
      compiler: gcc
      addons:
        apt:
          packages:
            - doxygen
            - libxcursor-dev
            - libxi-dev
            - libxinerama-dev
            - libxrandr-dev
            - mesa-utils 
            - libgl1-mesa-dev
            - libglu1-mesa-dev
      script:
        - |
          cd workspace;git submodule update --init --recursive
          cmake .. -DJFC_BUILD_DEMO=OFF -DJFC_BUILD_DOCS=ON -DJFC_BUILD_TESTS=OFF
          mv docs ~
          REMOTE_URL=$(git config --get remote.origin.url | sed -e "s/^https:\/\///")
          cd ~
          git clone --branch=gh-pages "https://${GITHUB_PUBLIC_REPO_TOKEN}@$REMOTE_URL" gh-pages
          cd gh-pages
          mv ~/docs/* .
          git add --all
          git commit -m "updating docs"
          git push
    
    # Coverage
    - os: linux
      name: generate coverage, upload to coveralls
      if: branch = master
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - cmake
            - git
            - libxcursor-dev
            - libxi-dev
            - libxinerama-dev
            - libxrandr-dev
            - mesa-utils 
            - libgl1-mesa-dev
            - libglu1-mesa-dev
      before_install: pip install --user cpp-coveralls
      script:
        - |
          cd workspace;git submodule update --init --recursive
          cmake .. -DJFC_BUILD_DOCS=OFF -DCMAKE_CXX_FLAGS="-g -O0 -Wall -fprofile-arcs -ftest-coverage"
          make
          make test
          cd ..
          after_success:
          - |
            coveralls --exclude test --exclude workspace/CMakeFiles --exclude cmake --exclude src --gcov-options '\-lp'

before_script: 
  - |
    CURRENT_COMMIT_HASH="$(git rev-parse HEAD)"

